<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java初遇</title>
    <url>/2021/05/10/Java%E5%88%9D%E9%81%87/</url>
    <content><![CDATA[<h1 id="Java-基础语法"><a href="#Java-基础语法" class="headerlink" title="Java 基础语法"></a>Java 基础语法</h1><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>
<ul>
<li><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p>
</li>
<li><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p>
</li>
<li><p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p>
</li>
<li><p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p>
<h2 id="Java程序"><a href="#Java程序" class="headerlink" title="Java程序"></a>Java程序</h2><p>public class HelloWorld {    </p>
<p>​            public static void main(String[] args) {       </p>
<p>​                     System.out.println(“Hello World”); // 输出 Hello World</p>
<p>​            }</p>
<p>​    }</p>
<p><img src="https://i.loli.net/2021/07/02/BxwOkXzYE1vHChU.jpg" alt="662E827A-FA32-4464-B0BD-40087F429E98.jpg"></p>
</li>
</ul>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>编写 Java 程序时，应注意以下几点：</p>
<ul>
<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>
<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>
<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>
<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>
<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li>
</ul>
<h2 id="Java-标识符"><a href="#Java-标识符" class="headerlink" title="Java 标识符"></a>Java 标识符</h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>
<p>关于 Java 标识符，有以下几点需要注意：</p>
<ul>
<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>
<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>
<li>关键字不能用作标识符</li>
<li>标识符是大小写敏感的</li>
<li>合法标识符举例：age、$salary、_value、__1_value</li>
<li>非法标识符举例：123abc、-salary</li>
</ul>
<h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>
<ul>
<li>访问控制修饰符 : default, public , protected, private</li>
<li>非访问控制修饰符 : final, abstract, static, synchronized</li>
</ul>
<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>
<h2 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h2><p>Java 中主要有如下几种类型的变量</p>
<ul>
<li>局部变量</li>
<li>类变量（静态变量）</li>
<li>成员变量（非静态变量）</li>
</ul>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多态</title>
    <url>/2021/06/29/Java%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h1><hr>
<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p>
<p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p>
<p><img src="https://i.loli.net/2021/06/29/vbs6h27uU4LrB3m.png" alt="java-polymorphism-111.png"></p>
<h3 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h3><p>· 1. 消除类型之间的耦合关系</p>
<p>· 2. 可替换性</p>
<p>· 3. 可扩充性</p>
<p>· 4. 接口性</p>
<p>· 5. 灵活性</p>
<p>· 6. 简化性</p>
<h3 id="多态存在的三个必要条件"><a href="#多态存在的三个必要条件" class="headerlink" title="多态存在的三个必要条件"></a>多态存在的三个必要条件</h3><p>· 继承</p>
<p>· 重写</p>
<p>· 父类引用指向子类对象：Parent p = new Child();</p>
<p><img src="https://i.loli.net/2021/06/29/QT6rB4bYMkqdCAi.png" alt="java-polymorphism-222.png"></p>
<p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p>
<p>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p>
<h2 id="多态的实现方式"><a href="#多态的实现方式" class="headerlink" title="多态的实现方式"></a>多态的实现方式</h2><h3 id="方式一：重写"><a href="#方式一：重写" class="headerlink" title="方式一：重写"></a>方式一：重写</h3><h3 id="方式二：接口"><a href="#方式二：接口" class="headerlink" title="方式二：接口"></a>方式二：接口</h3><h3 id="方式三：抽象类和抽象方法"><a href="#方式三：抽象类和抽象方法" class="headerlink" title="方式三：抽象类和抽象方法"></a>方式三：抽象类和抽象方法</h3>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>Java抽象类</title>
    <url>/2021/06/11/Java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="抽象类（相关知识）"><a href="#抽象类（相关知识）" class="headerlink" title="抽象类（相关知识）"></a>抽象类（相关知识）</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。<br>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。<br>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。<br>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。<br>在Java中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p>
<h2 id="2-抽象方法"><a href="#2-抽象方法" class="headerlink" title="2.抽象方法"></a>2.抽象方法</h2><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。<br>Abstract 关键字同样可以用来声明抽象方法，抽象方法只包含一个方法名，而没有方法体。<br>抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果一个类包含抽象方法，那么该类必须是抽象类。</span><br><span class="line">任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</span><br></pre></td></tr></table></figure>
<p>继承抽象方法的子类必须重写该方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该抽象方法，否则，从最初的父类到最终的子类都不能用来实例化对象。</p>
<h2 id="3-抽象类总结规定"><a href="#3-抽象类总结规定" class="headerlink" title="3.抽象类总结规定"></a>3.抽象类总结规定</h2><ol>
<li>抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。</li>
<li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。</li>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li>
</ol>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>抽象类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重写和重载</title>
    <url>/2021/06/02/Java%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="重写和重载（相关知识点）"><a href="#重写和重载（相关知识点）" class="headerlink" title="重写和重载（相关知识点）"></a>重写和重载（相关知识点）</h1><h2 id="1-重写-Override"><a href="#1-重写-Override" class="headerlink" title="1.重写(Override)"></a>1.重写(Override)</h2><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！<br>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。<br>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）参数列表与被重写方法的参数列表必须完全相同。</span><br><span class="line">2）返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</span><br><span class="line">3）访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</span><br><span class="line">4）父类的成员方法只能被它的子类重写。</span><br><span class="line">5）声明为 final 的方法不能被重写。</span><br><span class="line">6）声明为 static 的方法不能被重写，但是能够被再次声明。</span><br><span class="line">7）子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</span><br><span class="line">8）子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</span><br><span class="line">9）重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</span><br><span class="line">10）构造方法不能被重写。</span><br><span class="line">11）如果不能继承一个类，则不能重写该类的方法。</span><br></pre></td></tr></table></figure>
<h2 id="2-重载-Overload"><a href="#2-重载-Overload" class="headerlink" title="2.重载(Overload)"></a>2.重载(Overload)</h2><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）被重载的方法必须改变参数列表(参数个数或类型不一样)；</span><br><span class="line">2）被重载的方法可以改变返回类型；</span><br><span class="line">3）被重载的方法可以改变访问修饰符；</span><br><span class="line">4）被重载的方法可以声明新的或更广的检查异常；</span><br><span class="line">5）方法能够在同一个类中或者在一个子类中被重载。</span><br><span class="line">6）无法以返回值类型作为重载函数的区分标准。</span><br></pre></td></tr></table></figure>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p><img src="https://i.loli.net/2021/06/29/oJdqb2yLI3HchYj.png" alt="20171102-1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1）方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</span><br><span class="line">2）方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</span><br><span class="line">3）方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>重写和重载</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据结构</title>
    <url>/2021/07/02/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Java-数据结构"><a href="#Java-数据结构" class="headerlink" title="Java 数据结构"></a>Java 数据结构</h1><p>Java工具包提供了强大的数据结构。在Java中的数据结构主要包括以下几种接口和类：</p>
<ul>
<li><p>枚举（Enumeration）</p>
</li>
<li><p>位集合（BitSet）</p>
</li>
<li><p>向量（Vector）</p>
</li>
<li><p>栈（Stack）</p>
</li>
<li><p>字典（Dictionary）</p>
</li>
<li><p>哈希表（Hashtable）</p>
</li>
<li><p>属性（Properties）</p>
<p><img src="https://i.loli.net/2021/07/02/DTPcN8X72GHkrJv.png" alt="QQ截图20210702233337.jpg"></p>
</li>
</ul>
<h2 id="枚举（Enumeration）"><a href="#枚举（Enumeration）" class="headerlink" title="枚举（Enumeration）"></a>枚举（Enumeration）</h2><p>枚举（Enumeration）接口虽然它本身不属于数据结构,但它在其他数据结构的范畴里应用很广。 枚举（The Enumeration）接口定义了一种从数据结构中取回连续元素的方式。</p>
<p>例如，枚举定义了一个叫nextElement 的方法，该方法用来得到一个包含多元素的数据结构的下一个元素。</p>
<h2 id="位集合（BitSet）"><a href="#位集合（BitSet）" class="headerlink" title="位集合（BitSet）"></a>位集合（BitSet）</h2><p>位集合类实现了一组可以单独设置和清除的位或标志。</p>
<p>该类在处理一组布尔值的时候非常有用，你只需要给每个值赋值一”位”，然后对位进行适当的设置或清除，就可以对布尔值进行操作了。</p>
<h2 id="向量（Vector）"><a href="#向量（Vector）" class="headerlink" title="向量（Vector）"></a>向量（Vector）</h2><p>向量（Vector）类和传统数组非常相似，但是Vector的大小能根据需要动态的变化。</p>
<p>和数组一样，Vector对象的元素也能通过索引访问。</p>
<p>使用Vector类最主要的好处就是在创建对象的时候不必给对象指定大小，它的大小会根据需要动态的变化。</p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>栈（Stack）实现了一个后进先出（LIFO）的数据结构。</p>
<p>你可以把栈理解为对象的垂直分布的栈，当你添加一个新元素时，就将新元素放在其他元素的顶部。</p>
<p>当你从栈中取元素的时候，就从栈顶取一个元素。换句话说，最后进栈的元素最先被取出。</p>
<h2 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h2><p>字典（Dictionary） 类是一个抽象类，它定义了键映射到值的数据结构。</p>
<p>当你想要通过特定的键而不是整数索引来访问数据的时候，这时候应该使用Dictionary。</p>
<p>由于Dictionary类是抽象类，所以它只提供了键映射到值的数据结构，而没有提供特定的实现。</p>
<h2 id="哈希表（Hashtable）"><a href="#哈希表（Hashtable）" class="headerlink" title="哈希表（Hashtable）"></a>哈希表（Hashtable）</h2><p>Hashtable类提供了一种在用户定义键结构的基础上来组织数据的手段。</p>
<p>例如，在地址列表的哈希表中，你可以根据邮政编码作为键来存储和排序数据，而不是通过人名。</p>
<p>哈希表键的具体含义完全取决于哈希表的使用情景和它包含的数据。</p>
<h2 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h2><p>Properties 继承于 Hashtable.Properties 类表示了一个持久的属性集.属性列表中每个键及其对应值都是一个字符串。</p>
<p>Properties 类被许多Java类使用。例如，在获取环境变量时它就作为System.getProperties()方法的返回值。</p>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合框架</title>
    <url>/2021/05/25/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="Java-集合框架"><a href="#Java-集合框架" class="headerlink" title="Java 集合框架"></a>Java 集合框架</h1><p>早在 Java 2 中之前，Java 就提供了特设类。比如：Dictionary, Vector, Stack, 和 Properties 这些类用来存储和操作对象组。</p>
<p>虽然这些类都非常有用，但是它们缺少一个核心的，统一的主题。由于这个原因，使用 Vector 类的方式和使用 Properties 类的方式有着很大不同。</p>
<p>集合框架被设计成要满足以下几个目标。</p>
<ul>
<li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li>
<li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li>
<li>对一个集合的扩展和适应必须是简单的。</li>
</ul>
<p>为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： <strong>LinkedList</strong>, <strong>HashSet</strong>, 和 <strong>TreeSet</strong> 等,除此之外你也可以通过这些接口实现自己的集合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![2243690-9cd9c896e0d512ed.gif](https://i.loli.net/2021/07/07/I5oFZtbxQVyidCr.gif)</span><br></pre></td></tr></table></figure>

<p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有ArrayList 、LinkedList、HashSet、HashMap、LinkedHashSet、LinkedHashMap 等等。</p>
<p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p>
<ul>
<li><p><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</p>
</li>
<li><p><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p>
</li>
<li><p><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java集合框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Welcome</title>
    <url>/2021/05/10/Welcome/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>初始博客</category>
      </categories>
      <tags>
        <tag>initial blog</tag>
      </tags>
  </entry>
  <entry>
    <title>学习与阳光</title>
    <url>/2021/07/05/%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%98%B3%E5%85%89/</url>
    <content><![CDATA[<h1 id="阳光与学习"><a href="#阳光与学习" class="headerlink" title="阳光与学习"></a><strong>阳光与学习</strong></h1><p>2020/7/5正心学习，傍晚罕见的阳光遇到了认真罕见的读书人</p>
<p><img src="https://i.loli.net/2021/07/05/KzwB8MsuGOyH2fi.jpg" alt="QQ图片20210705225303.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随手拍</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello程序的一生</title>
    <url>/2021/06/21/Hello%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E7%94%9F/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/06/23/pPTmQclEerV6DGK.png" alt="图片1.png"></p>
<p><strong>计算机系统</strong></p>
<p><strong>大作业</strong></p>
<p>题   目 程序人生-Hello’s P2P     </p>
<p><strong>计算机科学与技术学院</strong></p>
<p><strong>2021年5月</strong></p>
<p><strong>摘  要</strong></p>
<p>摘要是论文内容的高度概括，应具有独立性和自含性，即不阅读论文的全文，就能获得必要的信息。摘要应包括本论文的目的、主要内容、方法、成果及其理论与实际意义。摘要中不宜使用公式、结构式、图表和非公知公用的符号与术语，不标注引用文献编号，同时避免将摘要写成目录式的内容介绍。</p>
<p>本论文通过计算机系统的所学知识描述了Hello程序的一生，也是对所学知识的总结和应用。我们在Linux系统下实现hello.c程序从 Program到Process的过程，并运用了多种调试手段和工具，最后进行了细致的分析，加深了我们对计算机系统的学习。</p>
<p>****关键词：****计算机系统；Hello程序；Linux操作系统；               </p>
<p><em><strong>*（摘要0分，缺失-1分，*</strong>***</em>*根据内容精彩称都酌情加分0-1分****<em><strong>*）*</strong></em></p>
<p>**<br>**</p>
<p><strong>目  录</strong></p>
<p><a href="#_Toc532238396">第1章 概述    </a></p>
<p><a href="#_Toc532238397">1.1 Hello简介    </a></p>
<p><a href="#_Toc532238398">1.2 环境与工具    </a></p>
<p><a href="#_Toc532238399">1.3 中间结果    </a></p>
<p><a href="#_Toc532238400">1.4 本章小结    </a></p>
<p><a href="#_Toc532238401">第2章 预处理    </a></p>
<p><a href="#_Toc532238402">2.1 预处理的概念与作用    </a></p>
<p><a href="#_Toc532238403">2.2在Ubuntu下预处理的命令    </a></p>
<p><a href="#_Toc532238404">2.3 Hello的预处理结果解析    </a></p>
<p><a href="#_Toc532238405">2.4 本章小结    </a></p>
<p><a href="#_Toc532238406">第3章 编译    </a></p>
<p><a href="#_Toc532238407">3.1 编译的概念与作用    </a></p>
<p><a href="#_Toc532238408">3.2 在Ubuntu下编译的命令    </a></p>
<p><a href="#_Toc532238409">3.3 Hello的编译结果解析    </a></p>
<p><a href="#_Toc532238410">3.4 本章小结    </a></p>
<p><a href="#_Toc532238411">第4章 汇编    </a></p>
<p><a href="#_Toc532238412">4.1 汇编的概念与作用    </a></p>
<p><a href="#_Toc532238413">4.2 在Ubuntu下汇编的命令    </a></p>
<p><a href="#_Toc532238414">4.3 可重定位目标elf格式    </a></p>
<p><a href="#_Toc532238415">4.4 Hello.o的结果解析    </a></p>
<p><a href="#_Toc532238416">4.5 本章小结    </a></p>
<p><a href="#_Toc532238417">第5章 链接    </a></p>
<p><a href="#_Toc532238418">5.1 链接的概念与作用    </a></p>
<p><a href="#_Toc532238419">5.2 在Ubuntu下链接的命令    </a></p>
<p><a href="#_Toc532238420">5.3 可执行目标文件hello的格式    </a></p>
<p><a href="#_Toc532238421">5.4 hello的虚拟地址空间    </a></p>
<p><a href="#_Toc532238422">5.5 链接的重定位过程分析    </a></p>
<p><a href="#_Toc532238423">5.6 hello的执行流程    </a></p>
<p><a href="#_Toc532238424">5.7 Hello的动态链接分析    </a></p>
<p><a href="#_Toc532238425">5.8 本章小结    </a></p>
<p><a href="#_Toc532238426">第6章 hello进程管理    </a></p>
<p><a href="#_Toc532238427">6.1 进程的概念与作用    </a></p>
<p><a href="#_Toc532238428">6.2 简述壳Shell-bash的作用与处理流程    </a></p>
<p><a href="#_Toc532238429">6.3 Hello的fork进程创建过程    </a></p>
<p><a href="#_Toc532238430">6.4 Hello的execve过程    </a></p>
<p><a href="#_Toc532238431">6.5 Hello的进程执行    </a></p>
<p><a href="#_Toc532238432">6.6 hello的异常与信号处理    </a></p>
<p><a href="#_Toc532238433">6.7本章小结    </a></p>
<p><a href="#_Toc532238434">第7章 hello的存储管理    </a></p>
<p><a href="#_Toc532238435">7.1 hello的存储器地址空间    </a></p>
<p><a href="#_Toc532238436">7.2 Intel逻辑地址到线性地址的变换-段式管理    </a></p>
<p><a href="#_Toc532238437">7.3 Hello的线性地址到物理地址的变换-页式管理    </a></p>
<p><a href="#_Toc532238438">7.4 TLB与四级页表支持下的VA到PA的变换    </a></p>
<p><a href="#_Toc532238439">7.5 三级Cache支持下的物理内存访问    </a></p>
<p><a href="#_Toc532238440">7.6 hello进程fork时的内存映射    </a></p>
<p><a href="#_Toc532238441">7.7 hello进程execve时的内存映射    </a></p>
<p><a href="#_Toc532238442">7.8 缺页故障与缺页中断处理    </a></p>
<p><a href="#_Toc532238443">7.9动态存储分配管理    </a></p>
<p><a href="#_Toc532238444">7.10本章小结    </a></p>
<p><a href="#_Toc532238445">第8章 hello的IO管理    </a></p>
<p><a href="#_Toc532238446">8.1 Linux的IO设备管理方法    </a></p>
<p><a href="#_Toc532238447">8.2 简述Unix IO接口及其函数    </a></p>
<p><a href="#_Toc532238448">8.3 printf的实现分析    </a></p>
<p><a href="#_Toc532238449">8.4 getchar的实现分析    </a></p>
<p><a href="#_Toc532238450">8.5本章小结    </a></p>
<p><a href="#_Toc532238451">结论    </a></p>
<p><a href="#_Toc532238452">附件    </a></p>
<p><a href="#_Toc532238453">参考文献    </a></p>
<h1 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="** **第1章 概述"></a>** **<strong>第1章</strong> <strong>概述</strong></h1><h2 id="1-1-Hello简介"><a href="#1-1-Hello简介" class="headerlink" title="1.1 Hello简介"></a>1.1 Hello简介</h2><p>根据Hello的自白，利用计算机系统的术语，简述Hello的P2P，020的整个过程。</p>
<p>P2P(From Program to Process)的过程：用户通过编写代码，完成hello.c程序；在Linux的Ubuntu操作系统下，调用C预处理器（C Pre-Processor）得到ASCII码的中间文件hello.i；接着调用C编译器（ccl）得到ASCII汇编语言文件hello.s；然后运行汇编器（as）得到可重定位目标文件hello.o；最后通过链接器（ld）得到可执行目标文件hello。用户在Ubuntu shell键入./hello启动此程序，hello运行时由OS调用fork函数生成进程，hello便成为了进程（process）。</p>
<p><img src="https://i.loli.net/2021/06/23/tvwgbHakBZzlTqS.png" alt="图片2.png"></p>
<p>PPT图片</p>
<p>020(From Zero-0 to Zero-0)的过程：继续上述过程，shell用execve函数调用函数运行程序，并进行虚拟内存映射（mmp），载入物理内存，并为运行的hello分配时间片以执行取指译码流水线等操作；OS的储存管理以及MMU解决VA到PA的转换，cache、TLB、页表等加速访问过程，IO管理与信号处理综合软硬件对信号等进行处理；最后程序结束时，shell回收hello进程，内核将其所有痕迹从系统中清除。“挥一挥手，不带走一片云彩”</p>
<h2 id="1-2-环境与工具"><a href="#1-2-环境与工具" class="headerlink" title="1.2 环境与工具"></a>1.2 环境与工具</h2><p>列出你为编写本论文，折腾Hello的整个过程中，使用的软硬件环境，以及开发与调试工具。</p>
<p>硬件环境CPU:i7-9750H  运行内存：DDR4 2666 16G</p>
<p>硬盘：512G SSD  显卡:GTX 1660TI</p>
<p>软件环境Windows10  ubuntu20.04LTS  vmware16</p>
<p>开发工具VSCODE  VIM  GCC</p>
<h2 id="1-3-中间结果"><a href="#1-3-中间结果" class="headerlink" title="1.3 中间结果"></a>1.3 中间结果</h2><p>列出你为编写本论文，生成的中间结果文件的名字，文件的作用等。</p>
<table>
<thead>
<tr>
<th>文件名字</th>
<th>文件作用</th>
</tr>
</thead>
<tbody><tr>
<td>hello.i</td>
<td>预处理得到的文件ASCII码的中间文件</td>
</tr>
<tr>
<td>hello.s</td>
<td>ASCII汇编语言文件</td>
</tr>
<tr>
<td>hello.o</td>
<td>汇编得到可重定位目标文件</td>
</tr>
<tr>
<td>hello.asm</td>
<td>反汇编得到的文本文件</td>
</tr>
<tr>
<td>hello.elf</td>
<td>hello.o的elf文件</td>
</tr>
<tr>
<td>hello</td>
<td>链接得到可执行目标文件</td>
</tr>
<tr>
<td>hello_elf</td>
<td>hello的elf文件</td>
</tr>
<tr>
<td>hello_asm</td>
<td>hello的反汇编文件</td>
</tr>
</tbody></table>
<h2 id="1-4-本章小结"><a href="#1-4-本章小结" class="headerlink" title="1.4 本章小结"></a>1.4 本章小结</h2><p>本章是对hello进行一个总的概述，先根据Hello的自白，利用计算机系统的术语介绍hello.c的P2P与020的过程，然后写出用于后续实现hello论文报告过程所需要的环境与工具，最后以表格形式列出编写本论文，生成的中间结果文件的名字和文件的作用。</p>
<p><em><strong>*（第1章0.5分）*</strong></em></p>
<h1 id="第2章-预处理"><a href="#第2章-预处理" class="headerlink" title="** **第2章 预处理"></a>** **<strong>第2章</strong> <strong>预处理</strong></h1><h2 id="2-1-预处理的概念与作用"><a href="#2-1-预处理的概念与作用" class="headerlink" title="2.1 预处理的概念与作用"></a>2.1 预处理的概念与作用</h2><p>概念：预处理是在程序源代码被编译之前，由预处理器（Preprocessor）对程序源代码进行的处理，一般指在程序源代码被翻译为目标代码的过程中，生成二进制代码之前的过程。</p>
<p>作用：主要与三部分有关 宏定义，文件包含，条件编译</p>
<p>1.将所有的#define删除，并且展开所有的宏定义:将宏名替换为文本</p>
<p>2.处理#include预编译指令，将被包含的文件插入到该预编译指令的位置。</p>
<p>3.删除所有注释“//”和“/* */”。</p>
<p>4.添加行号和文件标识，以便编译时产生调试用的行号及编译错误警告行号。</p>
<p>5.保留所有的#pragma编译器指令，后续编译过程需要使用它们。</p>
<p>6.根据#if以及#endif和#ifdef以及#ifndef来判断执行编译的条件。</p>
<h2 id="2-2在Ubuntu下预处理的命令"><a href="#2-2在Ubuntu下预处理的命令" class="headerlink" title="2.2在Ubuntu下预处理的命令"></a>2.2在Ubuntu下预处理的命令</h2><p>预处理命令：gcc -E hello.c -o hello.i</p>
<p><img src="https://i.loli.net/2021/06/23/LszFrh6u4n1dDSV.png" alt="图片3.png"></p>
<p>截图1</p>
<p>预处理得到的文件</p>
<h2 id="2-3-Hello的预处理结果解析"><a href="#2-3-Hello的预处理结果解析" class="headerlink" title="2.3 Hello的预处理结果解析"></a>2.3 Hello的预处理结果解析</h2><p>先看如下hello.c和hello.i的部分代码对比</p>
<p><img src="https://i.loli.net/2021/06/23/vKVTJb7EwjP9dsY.png" alt="图片4.png"></p>
<p>截图1</p>
<p><img src="https://i.loli.net/2021/06/23/d7rXnBYbSKjAP8s.png" alt="图片5.png"></p>
<p>截图2</p>
<p>由上可得：预处理实现了在编译前对代码的初步处理，对源代码进行了某些转换（实现头文件的展开，宏替换和去注释并作条件编译）。除了注释部分以及头文件部分，预编译文件与源文件无太大差别。</p>
<h2 id="2-4-本章小结"><a href="#2-4-本章小结" class="headerlink" title="2.4 本章小结"></a>2.4 本章小结</h2><p>本章主要介绍了预处理的概念和作用，以及Ubuntu如何通过指令实现hello.c到hello.i的转化，并且对两个文件进行了比较和解析，更具体地展示出预处理的概念和作用：预处理操作是在编译前对代码进行某些转换与处理，从而使编译得以成功进行（实现头文件的展开，宏替换和去注释并作条件编译）。</p>
<p><em><strong>*（第2章0.5分）*</strong></em></p>
<h1 id="第3章-编译"><a href="#第3章-编译" class="headerlink" title="** **第3章 编译"></a>** **<strong>第3章</strong> <strong>编译</strong></h1><h2 id="3-1-编译的概念与作用"><a href="#3-1-编译的概念与作用" class="headerlink" title="3.1 编译的概念与作用"></a>3.1 编译的概念与作用</h2><p>概念：编译是将高级语言转换为汇编语言的过程。编译就是将源语言经过词法分析、语法分析、语义分析以及经过一系列优化后生成汇编代码的过程。即将预处理得到的hello.i翻译成汇编语言文件hello.s的过程。</p>
<p>作用：编译过程中，编译器实现了经过词法分析、语法分析、语义分析等过程，在检查无错误后将代码翻译成汇编语言。即将高级语言程序转化为机器可直接识别处理执行的的机器码的中间步骤。</p>
<p>注意：这儿的编译是指从 .i 到 .s 即预处理后的文件到生成汇编语言程序</p>
<h2 id="3-2-在Ubuntu下编译的命令"><a href="#3-2-在Ubuntu下编译的命令" class="headerlink" title="3.2 在Ubuntu下编译的命令"></a>3.2 在Ubuntu下编译的命令</h2><p>编译的命令：gcc -S hello.i -o hello.s</p>
<p><img src="https://i.loli.net/2021/06/23/Lx9WjPNOngGidZl.png" alt="图片6.png"></p>
<p>截图1</p>
<p>编译生成的.s文件</p>
<h2 id="3-3-Hello的编译结果解析"><a href="#3-3-Hello的编译结果解析" class="headerlink" title="3.3 Hello的编译结果解析"></a>3.3 Hello的编译结果解析</h2><p>查看编译生成的.s文件，对其中的数据和操作进行解析</p>
<p><em><strong>*3.3.1数据：*</strong></em></p>
<p>3.3.1.1字符串：在c文件中，我们可以看到我们的字符串有 “用法: Hello 学号 姓名 秒数！\n” 和 “Hello %s %s\n” ，然后在s文件中可以看到如下的字符串 “\347\224\250\346\263\225: Hello\345\255\246\345\217\267 \345\247\223\345\220\215 \347\247\222\346\225\260\357\274\201” 这些字符串是这些汉字的UTF-8格式，一个汉字在该编码中占据3个字节，\作为分隔；对于字符串“Hello %s %s\n”，这是第二个printf传入的输出格式化参数。（printf格式输出控制串是在.rodata声明的）</p>
<p>3.3.1.2argc是我们main函数的第一个形式参数（%edi是第一个参数），可以看到我们将argc存放在-20(%rbp)，所以agrc储存在栈上，且所在栈空间位置为-20(%rbp)；</p>
<p>3.3.1.3*argv[]作为存放char指针的数组， *argv[]是我们main函数的第二个形式参数（%rsi是第二个参数），可以看到 *argv[]存放在-32(%rbp)，储存在栈上，且由如图访问argv[1]和argv[2]的操作（减地址）判断出数组中一个元素大小为8个字节。</p>
<p>3.3.1.4i在运行时被保存在栈上。在hello.s文件中，编译器将i存储在栈上空间-4(%rbp)中，而且可以看出i在栈上占据了4个字节的空间。</p>
<p>3.3.1.5立即数：源程序中出现的常数如0，1，2等直接在汇编代码中存在的，因为汇编代码是允许立即数以$常数形式存在的。</p>
<p><em><strong>*3.3.2操作：*</strong></em></p>
<p>3.3.2.1赋值操作：c文件中是对i进行赋值操作（for循环中）</p>
<p>3.3.2.2形参传入：argc存放在-20(%rbp)，*argv[]存放在-32(%rbp)</p>
<p>3.3.2.3函数操作：</p>
<p>exit()函数：通过汇编语句movl    $1, %edi将%edi寄存器内容设置为1</p>
<p>getchar()函数：如下</p>
<p>printf()函数：</p>
<p>第一次调用printf函数时，优化成了puts函数</p>
<p>第二次没有被优化为puts函数，而是直接调用printf函数</p>
<p>3.3.2.4运算操作：c文件中的对i进行累加比较操作</p>
<p>3.3.2.5关系判断：c文件中的if(argc!=4)和for(i=0;i&lt;8;i++)</p>
<p>用cmpl进行比较，并设置条件码，随后执行je或者jle</p>
<p>je利用条件码，发现等于0的话，则跳转到.L2段；若不等于0，则继续向下执行，调用puts函数输出命令行要求，并调用exit函数退出</p>
<p>jle语句利用这些条件码，若小于等于0，则跳转到.L4段；而若大于0，则继续向下执行，结束程序</p>
<p>3.3.2.6控制转移：同上也出现在c文件中的if(argc!=4)和for(i=0;i&lt;8;i++)</p>
<p>je利用条件码，发现等于0的话，则跳转到.L2段；若不等于0，则继续向下执行，调用puts函数输出命令行要求，并调用exit函数退出</p>
<p>jle语句利用这些条件码，若小于等于0，则跳转到.L4段；而若大于0，则继续向下执行，结束程序</p>
<p><em><strong>*3.3.3文件分析补充：*</strong></em></p>
<p>.file                声明源文件</p>
<p>.text                声明以下是代码段</p>
<p>.secetion  .rodata    声明以下是rodata节</p>
<p>.align                声明对指令或者数据的存放地址进行对齐的方式</p>
<p>.string                声明一个string类型</p>
<p>.globl                声明一个全局变量</p>
<p>.type             声明是函数类型还是对象类型</p>
<p>此部分是重点，说明编译器是怎么处理C语言的各个数据类型以及各类操作的。应分3.3.1~ 3.3.x等按照类型和操作进行分析，****只要hello.s中出现的属于大作业PPT中P4给出的参考C数据与操作，都应解析****。</p>
<h2 id="3-4-本章小结"><a href="#3-4-本章小结" class="headerlink" title="3.4 本章小结"></a>3.4 本章小结</h2><p>本章介绍了编译的概念、作用，以及在Ubuntu下通过gcc指令对.i文件进行编译成.s文件的方法，并最终将hello.c与hello.s进行详细对比，针对于数据（立即数，字符串，变量）和操作（赋值操作，算术操作，关系操作，参数传入，控制转移，函数操作）。</p>
<p><em><strong>*（第3章2分）*</strong></em></p>
<h1 id="第4章-汇编"><a href="#第4章-汇编" class="headerlink" title="** **第4章 汇编"></a>** **<strong>第4章</strong> <strong>汇编</strong></h1><h2 id="4-1-汇编的概念与作用"><a href="#4-1-汇编的概念与作用" class="headerlink" title="4.1 汇编的概念与作用"></a>4.1 汇编的概念与作用</h2><p>概念：程序运行汇编器as，将汇编语言hello.s翻译成机器语言hello.o的过程</p>
<p>作用：汇编就是将高级语言转化为机器可直接识别执行的代码文件的过程，汇编器将.s 汇编程序翻译成机器语言指令，即从汇编指令进一步得到CPU可以执行的机器指令。</p>
<p>注意：这儿的汇编是指从 .s 到 .o 即编译后的文件到生成机器语言二进制程序的过程。</p>
<h2 id="4-2-在Ubuntu下汇编的命令"><a href="#4-2-在Ubuntu下汇编的命令" class="headerlink" title="4.2 在Ubuntu下汇编的命令"></a>4.2 在Ubuntu下汇编的命令</h2><p>gcc -c hello.s -o hello.o</p>
<p><img src="https://i.loli.net/2021/06/23/4QnLbOkpGsmBuh5.png" alt="图片7.png"></p>
<p>截图1</p>
<p>汇编指令产生.o文件</p>
<h2 id="4-3-可重定位目标elf格式"><a href="#4-3-可重定位目标elf格式" class="headerlink" title="4.3 可重定位目标elf格式"></a>4.3 可重定位目标elf格式</h2><p>分析hello.o的ELF格式，用readelf等列出其各节的基本信息，特别是重定位项目分析。</p>
<p>1.读取可重定位目标文件</p>
<p>在终端输入命令行readelf -a hello.o &gt; hello.elf将elf可重定位目标文件输出定向到文本文件hello.elf中</p>
<p><img src="https://i.loli.net/2021/06/23/8bS4WID6vJOgojQ.png" alt="图片8.png"></p>
<p>截图2</p>
<p>指令及产生的elf文件</p>
<p>2.ELF可重定位目标文件格式及内容</p>
<p><img src="https://i.loli.net/2021/06/23/iZ6tPUFzkWNhClI.png" alt="图片9.png"></p>
<p>PPT图1</p>
<p><img src="https://i.loli.net/2021/06/23/cYURgXei7L2xKMw.png" alt="图片10.png"></p>
<p>PPT图2</p>
<p>3.可得出有如下部分</p>
<p>3.1 ELF头</p>
<p><img src="https://i.loli.net/2021/06/23/AJvWYQFmKP38IMS.png" alt="图片11.png"></p>
<p>截图1</p>
<p>3.2节头</p>
<p><img src="https://i.loli.net/2021/06/23/nKE26g8o1MQR9hU.png" alt="图片12.png"></p>
<p>截图2</p>
<p>ELF文件中有很多段，节头就是保存这些段的基本属性的结构。段表是ELF文件中除了ELF头以为最重要的结构，它描述了ELF的各个段的信息，如每个段的名字，段的长度，在文件中的偏移，读写权限等。ELF文件的段结构就是由段表决定的，编译器，链接器和装载器都是通过段表来定位和访问各个段的属性的。</p>
<p>3.3重定位表</p>
<p>链接器在处理目标文件时，需要对目标文件中某些部位进行重定位，及代码段和数据段中那些对绝对地址引用的位置。这些重定位的信息都记录在ELF文件的重定位表里面，对于每个需要重定位的代码段或数据段，都会有相应的重定位表。</p>
<p>3.4符号表</p>
<p>ELF文件中用到了很多符号，比如段名，变量名等。因为字符串的长度往往不是固定的，故难以用固定的结构表示。常见的做法是把字符串集中起来存放到一个表，然后使用字符串在表中的偏移来引用字符串。</p>
<h2 id="4-4-Hello-o的结果解析"><a href="#4-4-Hello-o的结果解析" class="headerlink" title="4.4 Hello.o的结果解析"></a>4.4 Hello.o的结果解析</h2><p>objdump -d -r hello.o  分析hello.o的反汇编，并请与第3章的 hello.s进行对照分析。</p>
<p>命令行输入：objdump -d -r hello.o &gt; hello.asm</p>
<p><img src="https://i.loli.net/2021/06/23/moW52BYEFHbIJsa.png" alt="图片13.png"></p>
<p>截图</p>
<p>对hello.o反汇编并存入文件</p>
<p>将hello.asm与hello.s进行比较（大部分相同，小部分有区别）</p>
<p>1.代码格式</p>
<p>hello.s每行代码前没有相应的机器码，hello.o反汇编代码前面有对应的机器码</p>
<p>2.分支跳转</p>
<p>hello.s文件中分支转移是使用段名称进行跳转的，而hello.o文件中分支转移是通过地址进行跳转的</p>
<p>3.函数调用</p>
<p>hello.s文件中，函数调用call后跟的是函数名称；而hello.o文件中，call后跟的是下一条指令。而同时因为这些函数都是共享库函数，这时候地址是不确定的，因此call指令将相对地址设置为全0，e8 00 00 00 00（目标地址正是下一条指令），然后在.rela.text节中为其添加重定位条目，在后续链接时确定。</p>
<p>4.全局变量</p>
<p>hello.s文件中，全局变量是通过段地址+%rip完成的；hello.o文件反汇编，则是通过0+%rip，因为.rodata节中的数据是在运行时确定的，也需要重定位，现在填0占位，并为其在.rela.text节中添加重定位条目。</p>
<p>5.数字表示</p>
<p>hello.s中操作数采用的是十进制，hello.o反汇编代码中采用的是十六进制</p>
<p>说明机器语言的构成，与汇编语言的映射关系。特别是机器语言中的操作数与汇编语言不一致，特别是分支转移函数调用等。</p>
<h2 id="4-5-本章小结"><a href="#4-5-本章小结" class="headerlink" title="4.5 本章小结"></a>4.5 本章小结</h2><p>本章介绍了汇编的概念、作用，以及在Ubuntu下用gcc指令对.s文件进行汇编成.o文件的方法和过程（对hello.s进行编译处理处理得到hello.o），并分析hello.o的ELF格式，最后对hello.o文件进行反汇编得到hello.asm，将hello.asm与hello.s进行对比并说明区别。</p>
<p><em><strong>*（第4章1分）*</strong></em></p>
<h1 id="第5-章-链接"><a href="#第5-章-链接" class="headerlink" title="** 第5**章 链接"></a>** <strong><strong>第</strong></strong>5**<strong>章</strong> <strong>链接</strong></h1><h2 id="5-1-链接的概念与作用"><a href="#5-1-链接的概念与作用" class="headerlink" title="5.1 链接的概念与作用"></a>5.1 链接的概念与作用</h2><p>概念：链接是处理可重定位文件，把它们的各种符号引用和符号定义转换为可执行文件中（这个文件可以被加载到内存并执行）的过程，链接还分为静态链接和动态链接。</p>
<p>作用：链接将汇编语言代码更进一步转化为可以执行的机器代码，即把可重定位目标文件和命令行参数作为输入，生成可执行目标文件。</p>
<p>注意：这儿的链接是指从 hello.o 到hello生成过程。</p>
<h2 id="5-2-在Ubuntu下链接的命令"><a href="#5-2-在Ubuntu下链接的命令" class="headerlink" title="5.2 在Ubuntu下链接的命令"></a>5.2 在Ubuntu下链接的命令</h2><p>命令行（使用ld的链接命令）：ld -o hello -dynamic-linker /lib64/ld-linux-x86-64.so.2 /usr/lib/x86_64-linux-gnu/crt1.o /usr/lib/x86_64-linux-gnu/crti.o hello.o /usr/lib/x86_64-linux-gnu/libc.so /usr/lib/x86_64-linux-gnu/crtn.o</p>
<p><img src="https://i.loli.net/2021/06/23/q5QcUWN9XTnJbMR.png" alt="图片14.png"></p>
<p>截图1</p>
<p>命令行：gcc hello.o -o hello</p>
<p>使用ld的链接命令，应截图，展示汇编过程！ 注意不只连接hello.o文件</p>
<h2 id="5-3-可执行目标文件hello的格式"><a href="#5-3-可执行目标文件hello的格式" class="headerlink" title="5.3 可执行目标文件hello的格式"></a>5.3 可执行目标文件hello的格式</h2><p>分析hello的ELF格式，用readelf等列出其各段的基本信息，包括各段的起始地址，大小等信息。</p>
<p>在终端中输入命令行：readelf -a hello &gt;hello_elf</p>
<p>查看hello的ELF格式</p>
<p><img src="https://i.loli.net/2021/06/23/6GylstDHqdjxOpc.png" alt="图片16.png"></p>
<p>截图1</p>
<p>各节的基本信息均在节头表（描述目标文件的节）中进行声明，如下</p>
<p><img src="https://i.loli.net/2021/06/23/ia3suIJ2xMGb7rD.png" alt="图片17.png"></p>
<p>截图2</p>
<h2 id="5-4-hello的虚拟地址空间"><a href="#5-4-hello的虚拟地址空间" class="headerlink" title="5.4 hello的虚拟地址空间"></a>5.4 hello的虚拟地址空间</h2><p>使用edb加载hello，查看本进程的虚拟地址空间各段信息，并与5.3对照分析说明。  </p>
<p>打开edb，加载hello可执行文件</p>
<p>查看本进程的虚拟地址空间各段信息，并与5.3对照分析</p>
<p>观察edb的Data Dump窗口，再观察edb的Sympols小窗口。</p>
<p>发现确实虚拟地址与以上的节头表是一一对应的</p>
<h2 id="5-5-链接的重定位过程分析"><a href="#5-5-链接的重定位过程分析" class="headerlink" title="5.5 链接的重定位过程分析"></a>5.5 链接的重定位过程分析</h2><p>反汇编hello命令行objdump -d -r hello &gt; hello_asm（与上述的hello.asm不同）</p>
<p><img src="https://i.loli.net/2021/06/23/TwMSx149zKCXh6D.png" alt="图片20.png"></p>
<p>截图1</p>
<p>两者进行对比</p>
<p>对比发现，hello 和 hello.o 反汇编生成的代码几乎相同，主要区别在于：前者比后者多出了很多个文件节；前者地址是可由 CPU 直接访问的虚拟地址，后者地址是相对偏移；前者比后者多出了许多共享库函数。</p>
<p>链接器把 hello.o 中的偏移量加上程序在虚拟内存中的起始地址得到了可直接访问的地址。链接的重定位过程说明。要合并相同的节，确定新节中所有定义符号在虚拟地址空间中的地址，还要对引用符号进行重定位，修改.text节和.data节中对每个符号的引用，而这些需要用到在.rel_data和.rel_text节中保存的重定位信息。</p>
<p>objdump -d -r hello 分析hello与hello.o的不同，说明链接的过程。</p>
<p>结合hello.o的重定位项目，分析hello中对其怎么重定位的。</p>
<h2 id="5-6-hello的执行流程"><a href="#5-6-hello的执行流程" class="headerlink" title="5.6 hello的执行流程"></a>5.6 hello的执行流程</h2><p>使用edb执行hello，说明从加载hello到_start，到call main,以及程序终止的所有过程。请列出其调用与跳转的各个子程序名或程序地址。</p>
<p><img src="https://i.loli.net/2021/06/23/TjvM63OS2LKfYq9.png" alt="图片21.png"></p>
<p>0000000000400468 &lt;_init&gt;:</p>
<p>0000000000400490 &lt;puts@plt-0x10&gt;:</p>
<p>00000000004004a0 &lt;puts@plt&gt;:</p>
<p>00000000004004b0 &lt;printf@plt&gt;:</p>
<p>00000000004004c0 &lt;__libc_start_main@plt&gt;:</p>
<p>00000000004004d0 &lt;getchar@plt&gt;:</p>
<p>00000000004004e0 &lt;atoi@plt&gt;:</p>
<p>00000000004004f0 &lt;exit@plt&gt;:</p>
<p>0000000000400500 &lt;sleep@plt&gt;:</p>
<p>0000000000400510 &lt;.plt.got&gt;:</p>
<p>0000000000400520 &lt;_start&gt;:</p>
<p>000000000040054a <main>:</p>
<p>00000000004005e0 &lt;__libc_csu_init&gt;:</p>
<p>0000000000400650 &lt;__libc_csu_fini&gt;:</p>
<p>0000000000400654 &lt;_fini&gt;:</p>
<p>列出如上</p>
<h2 id="5-7-Hello的动态链接分析"><a href="#5-7-Hello的动态链接分析" class="headerlink" title="5.7 Hello的动态链接分析"></a>5.7 Hello的动态链接分析</h2><p>分析hello程序的动态链接项目，通过edb调试，分析在dl_init前后，这些项目的内容变化。要截图标识说明。</p>
<p>对于动态共享链接库中PIC函数，编译器添加重定位记录，等待动态链接器处理，同时，链接器采用延迟绑定的方法。可以看出，在dl_init前， PIC函数调用的目标地址都实际指向PLT中的代码逻辑，初始时每个GOT条目都指向对应的PLT条目的第二条指令。在dl_init后，部分数据信息发生变动。</p>
<h2 id="5-8-本章小结"><a href="#5-8-本章小结" class="headerlink" title="5.8 本章小结"></a>5.8 本章小结</h2><p>本章主要介绍了链接的概念、作用，并且在Ubuntu下通过ld指令实现链接的方法和过程，通过对hello.o进行链接得到可执行目标文件hello，分析hello的ELF格式，以及hello和hello.o反汇编代码的比较，最后分析动态链接的实现。</p>
<p><em><strong>*（第5章1分）*</strong></em></p>
<h1 id="第6-章-hello进程管理"><a href="#第6-章-hello进程管理" class="headerlink" title="** 第6**章 hello进程管理"></a>** <strong><strong>第</strong></strong>6**<strong>章</strong> <strong>hello进程管理</strong></h1><h2 id="6-1-进程的概念与作用"><a href="#6-1-进程的概念与作用" class="headerlink" title="6.1 进程的概念与作用"></a>6.1 进程的概念与作用</h2><p>概念：进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。</p>
<p>作用：进程作为一个执行中程序的实例，系统中每个程序都运行在某个进程的上下文中，上下文是由程序正确运行所需的状态组成的。使CPU并行完成任务，并且高效利用内存和CPU。</p>
<h2 id="6-2-简述壳Shell-bash的作用与处理流程"><a href="#6-2-简述壳Shell-bash的作用与处理流程" class="headerlink" title="6.2 简述壳Shell-bash的作用与处理流程"></a>6.2 简述壳Shell-bash的作用与处理流程</h2><p>作用：Shell是用户与操作系统之间完成交互式操作的一个接口程序，它为用户提供简化了的操作。bash是Linux操作系统的默认shell程序。</p>
<p>处理流程：</p>
<p>1.将用户输入的命令行进行解析，分析是否是内置命令；</p>
<p>2.若是内置命令，直接执行；若不是内置命令，则bash在初始子进程的上下文中加载和运行它。</p>
<p>3.本质上就是shell在执行一系列的读和求值的步骤，在这个过程中，他同时可以接受来自终端的命令输入。</p>
<h2 id="6-3-Hello的fork进程创建过程"><a href="#6-3-Hello的fork进程创建过程" class="headerlink" title="6.3 Hello的fork进程创建过程"></a>6.3 Hello的fork进程创建过程</h2><p>执行中的进程调用fork()函数，就创建了一个子进程。其函数原型为pid_t fork(void)；对于返回值，若成功调用一次则返回两个值，子进程返回0，父进程返回子进程ID；否则，出错返回-1。</p>
<h2 id="6-4-Hello的execve过程"><a href="#6-4-Hello的execve过程" class="headerlink" title="6.4 Hello的execve过程"></a>6.4 Hello的execve过程</h2><p>execve函数在当前进程的上下文中加载并运行新程序hello。函数原型为：int exeve(const char *filename, const char *argv[], const char *envp[])；如果成功，则不返回；如果错误，则返回-1。</p>
<p>Shell的fork子程序调用execve函数，execve函数在当前子进程的上下文中加载运行可执行文件hello，创建一个hello的映像，该程序会覆盖子进程fork的地址空间，Shell复制的hello拥有相同的PID。只有当出现错误时，例如找不到hello，execve才会返回到调用程序。</p>
<h2 id="6-5-Hello的进程执行"><a href="#6-5-Hello的进程执行" class="headerlink" title="6.5 Hello的进程执行"></a>6.5 Hello的进程执行</h2><p>进程执行：刚开始运行时内核为其保存一个上下文，进程在用户状态下运行。循环结束后，hello 调用 getchar 函数，之前 hello 运行在用户模式下，在调用 getchar 时进入内核模式，执行上下文切换，把控制转移给其他进程。完成键盘输入后，内核从其他进程切换回 hello 进程，最终 hello执行 return终止进程。</p>
<p>每个进程都具有各自的虚拟地址空间。操作系统内核使用上下文切换的较高层形式的异常控制流来实现多任务：内核为每个进程维持一个上下文。上下文切换的流程：1.保存当前进程的上下文。2.恢复某个先前被抢占的进程被保存的上下文。3.将控制传递给这个新恢复的进程。</p>
<p>结合进程上下文信息、进程时间片，阐述进程调度的过程，用户态与核心态转换等等。</p>
<h2 id="6-6-hello的异常与信号处理"><a href="#6-6-hello的异常与信号处理" class="headerlink" title="6.6 hello的异常与信号处理"></a>6.6 hello的异常与信号处理</h2><p> hello执行过程中会出现哪几类异常，会产生哪些信号，又怎么处理的。</p>
<p> 程序运行过程中可以按键盘，如不停乱按，包括回车，Ctrl-Z，Ctrl-C等，Ctrl-z后可以运行ps  jobs  pstree  fg  kill 等命令，请分别给出各命令及运行结截屏，说明异常与信号的处理。</p>
<p>1.正常执行</p>
<p>2.不停乱按（包括回车）</p>
<p>3.Ctrl-C</p>
<p>4.单个回车</p>
<p>5.Ctrl-Z（后续可以运行ps  jobs  pstree  fg  kill 等命令）</p>
<h2 id="6-7本章小结"><a href="#6-7本章小结" class="headerlink" title="6.7本章小结"></a>6.7本章小结</h2><p>本章主要介绍了进程的概念和作用，还描述了操作系统通过shell调用fork函数以及execve函数的过程，以及hello 程序的上下文切换、异常与信号处理，并通过hello执行过程进行实践（出现异常和产生信号）。</p>
<p><em><strong>*（第6章1分）*</strong></em></p>
<h1 id="第7-章-hello的存储管理"><a href="#第7-章-hello的存储管理" class="headerlink" title="** 第7**章 hello的存储管理"></a>** <strong><strong>第</strong></strong>7**<strong>章</strong> <strong>hello的存储管理</strong></h1><h2 id="7-1-hello的存储器地址空间"><a href="#7-1-hello的存储器地址空间" class="headerlink" title="7.1 hello的存储器地址空间"></a>7.1 hello的存储器地址空间</h2><p>结合hello说明逻辑地址、线性地址、虚拟地址、物理地址的概念。</p>
<p>逻辑地址：访问指令给出的地址 (操作数) 叫逻辑地址,也叫相对地址，由选择符和偏移量组成。要经过寻址方式的计算或变换才得到内存储器中的物理地址。</p>
<p>线性地址：线性地址或也叫虚拟地址，逻辑地址经过段机制后转化为线性地址，是一个不真实的地址，线性地址对应硬件页式内存的转换前地址。</p>
<p>虚拟地址：虚拟地址即线性地址，虚拟地址是对物理地址的映射。</p>
<p>物理地址：真实的物理内存对应地址。CPU通过地址总线的寻址，找到真实的物理内存对应地址。</p>
<h2 id="7-2-Intel逻辑地址到线性地址的变换-段式管理"><a href="#7-2-Intel逻辑地址到线性地址的变换-段式管理" class="headerlink" title="7.2 Intel逻辑地址到线性地址的变换-段式管理"></a>7.2 Intel逻辑地址到线性地址的变换-段式管理</h2><p>段式管理通过偏移地址来完成逻辑地址的空间表示。</p>
<p>在实模式下，逻辑地址CS: EA通过CS * 16 + EA转换为物理地址。</p>
<p>在保护模式下，以段描述符作为下标，到GDT/LDT表中查表获得段地址，将段地址+偏移地址转换为线性地址。</p>
<h2 id="7-3-Hello的线性地址到物理地址的变换-页式管理"><a href="#7-3-Hello的线性地址到物理地址的变换-页式管理" class="headerlink" title="7.3 Hello的线性地址到物理地址的变换-页式管理"></a>7.3 Hello的线性地址到物理地址的变换-页式管理</h2><p>虚拟地址被分为虚拟页号与虚拟页偏移量，CPU取出虚拟页号，通过页表基址寄存器定位页表条目，从页表条目中取出信息物理页号，将物理页号与虚拟页号之间建立映射，进而完成线性地址到物理地址的变换。</p>
<p><img src="https://i.loli.net/2021/06/23/TnhfPwVmqoBFKr1.png" alt="图片23.png"></p>
<p>网图</p>
<h2 id="7-4-TLB与四级页表支持下的VA到PA的变换"><a href="#7-4-TLB与四级页表支持下的VA到PA的变换" class="headerlink" title="7.4 TLB与四级页表支持下的VA到PA的变换"></a>7.4 TLB与四级页表支持下的VA到PA的变换</h2><p>虚拟内存系统通过将虚拟内存分割为大小固定的“虚拟页”来处理这个问题，同时物理内存也被分割为大小等同与虚拟页的“物理页”，并与“虚拟页”之间建立映射关系。</p>
<p>CPU产生VA，VA传送给MMU，MMU使用VPN高位作为TLBT和TLBI向TLB中寻找匹配。命中则得到PA，没有命中，则由MMU查询页表，CR3确定第一级页表的起始地址，VPN1提供一个一级页表条目（PTE）的偏移量，可通过PTE前往二级页表的基地址，如此重复，可在第四级页表中组合成PA，添加到PLT，完成虚拟地址到物理地址的变换。</p>
<p><img src="https://i.loli.net/2021/06/23/ZimYzqT3VxfDHgj.png" alt="图片25.png"></p>
<p>PPT图</p>
<h2 id="7-5-三级Cache支持下的物理内存访问"><a href="#7-5-三级Cache支持下的物理内存访问" class="headerlink" title="7.5 三级Cache支持下的物理内存访问"></a>7.5 三级Cache支持下的物理内存访问</h2><p>对于虚拟地址请求，首先去TLB寻找，若命中则在MMU获取，没有命中则根据多级页表，得到物理地址，接下去到cache中找，三级Cache一级级寻找。</p>
<p><img src="https://i.loli.net/2021/06/23/ISOL2sPUjq1wlZH.png" alt="图片26.png"></p>
<p>PPT图</p>
<h2 id="7-6-hello进程fork时的内存映射"><a href="#7-6-hello进程fork时的内存映射" class="headerlink" title="7.6 hello进程fork时的内存映射"></a>7.6 hello进程fork时的内存映射</h2><p>1.虚拟内存和内存映射解释了fork函数如何为hello进程提供私有的虚拟地址空间。</p>
<p>2.fork为hello的进程创建虚拟内存</p>
<p>创建当前进程的的mm_struct，vm_area_struct和页表的原样副本；两个进程中的每个页面都标记为只读；两个进程中的每个区域结构（vm_area_struct）都标记为私有的写时复制（COW）</p>
<p>3.在hello进程中返回时，hello进程拥有与调用fork进程相同的虚拟内存。</p>
<p>4.随后的写操作通过写时复制机制创建新页面</p>
<h2 id="7-7-hello进程execve时的内存映射"><a href="#7-7-hello进程execve时的内存映射" class="headerlink" title="7.7 hello进程execve时的内存映射"></a>7.7 hello进程execve时的内存映射</h2><p>1.在bash中的进程中执行了如下的execve调用：execve(“hello”,NULL,NULL)；</p>
<p>2.execve函数在当前进程中加载并运行包含在可执行文件hello中的程序，用hello替代了当前bash中的程序。</p>
<p>下面是加载并运行hello的几个步骤</p>
<p>1.删除已存在的用户区域。</p>
<p>2.映射私有区域</p>
<p>3.映射共享区域</p>
<p>4.设置程序计数器（PC）</p>
<p>exceve做的最后一件事是设置当前进程的上下文中的程序计数器，是指指向代码区域的入口点。而下一次调度这个进程时，他将从这个入口点开始执行。Linux将根据需要换入代码和数据页面。</p>
<p><img src="https://i.loli.net/2021/06/23/NPWwjtuB3rLJ6hK.png" alt="图片27.png"></p>
<p>网图</p>
<h2 id="7-8-缺页故障与缺页中断处理"><a href="#7-8-缺页故障与缺页中断处理" class="headerlink" title="7.8 缺页故障与缺页中断处理"></a>7.8 缺页故障与缺页中断处理</h2><p>DRAM缓存不命中称为缺页。CPU引用虚拟页中的一个字，通过读取页表条目，若发现有效位为0，说明其不在缓存中，触发缺页异常。缺页异常发生时，通常会调用内核里的缺页异常处理程序，该程序会选择一个牺牲页，这里是存放在PP3的VP4,如果VP4已经被修改，内核就会将它复制回磁盘。无论哪种情况，内核都会修改VP4的页表条目，反映出VP4不再缓存在内存里。</p>
<h2 id="7-9动态存储分配管理"><a href="#7-9动态存储分配管理" class="headerlink" title="7.9动态存储分配管理"></a>7.9动态存储分配管理</h2><p><em>Printf会调用malloc，请简述动态内存管理的基本方法与策略。</em></p>
<p>动态存储分配管理由动态内存分配器完成。动态内存分配器维护着一个进程的虚拟内存区域，称为堆。堆是一个请求二进制零的区域，它紧接在未初始化的数据区后开始，并向上生长（向更高的地址）。分配器将堆视为一组不同大小的块的集合来维护。每个块就是一个连续的虚拟内存片，要么是已分配的，要么是空闲的。已分配的块显式地保留为供应用程序使用。空闲块可以用来分配。空闲块保持空闲，直到它显示地被应用程序所分配。一个已分配的块保持已分配状态，直到它被释放，这种释放要么是应用程序显式执行的，要么是内存分配器自身隐式执行的。动态内存分配器从堆中获得空间，将对应的块标记为已分配，回收时将堆标记为未分配。而分配和回收的过程中，往往涉及到分割、合并等操作。动态内存分配器的目标是在对齐块的基础上，尽可能地提高吞吐率及空间占用率，即减少因为内存分配造成的碎片。其实现常见的数据结构有隐式空闲链表、显式空闲链表、分离空闲链表，常见的放置策略有首次适配、下一次适配和最佳适配。</p>
<h2 id="7-10本章小结"><a href="#7-10本章小结" class="headerlink" title="7.10本章小结"></a>7.10本章小结</h2><p>本章主要介绍了hello的存储管理（主要为内存），还有Intel逻辑地址到线性地址的变换-段式管理，以及TLB与多级页表支持下的VA到PA的转换，同时还有三级Cache支持下的物理内存访问，hello的fork和execve内存映射，缺页故障与缺页中断处理程序，动态存储分配管理。</p>
<p><em><strong>*（第7章 2分）*</strong></em></p>
<h1 id="第8-章-hello的IO管理"><a href="#第8-章-hello的IO管理" class="headerlink" title="** 第8**章 hello的IO管理"></a>** <strong><strong>第</strong></strong>8**<strong>章</strong> <strong>hello的IO管理</strong></h1><h2 id="8-1-Linux的IO设备管理方法"><a href="#8-1-Linux的IO设备管理方法" class="headerlink" title="8.1 Linux的IO设备管理方法"></a>8.1 Linux的IO设备管理方法</h2><p>设备的模型化：文件</p>
<p>普通文件（包含任意数据的文件）、目录（文件夹，包含一组链接的文件，每个链接都将一个文件名映射到一个文件）、套接字（用来与另一个进程进行跨网络通信的文件）、命名通道、符号链接以及字符和块设备。</p>
<p>设备管理：unix io接口</p>
<p>打开和关闭文件、读取和写入文件以及改变当前文件的位置。</p>
<h2 id="8-2-简述Unix-IO接口及其函数"><a href="#8-2-简述Unix-IO接口及其函数" class="headerlink" title="8.2 简述Unix IO接口及其函数"></a>8.2 简述Unix IO接口及其函数</h2><p>1.打开文件——open()：open函数将file那么转换为一个文件描述符并且返回描述符数字。返回的描述符总是在进程中当前没有打开的最小描述符。</p>
<p>2.关闭文件——close()：当应用完成了对文件的访问之后，它就通知内核关闭这个文件。作为响应，内核释放文件打开时创建的数据结构，并将这个描述符恢复到可用的描述符池中。无论一个进程因为何种原因终止时，内核都会关闭所有打开的文件并释放它们的内存资源。</p>
<p>3.读取文件——read()：read函数从描述符为fd 的当前文件位置复制最多n个字节到内存位置buf。返回值一1表示一个错误，而返回值0表示EOF。否则，返回值表示的是实际传送的字节数量。</p>
<p>4.写入文件——write()：write函数从内存位置buf复制至多n个字节到描述符fd的当前文件位置。</p>
<h2 id="8-3-printf的实现分析"><a href="#8-3-printf的实现分析" class="headerlink" title="8.3 printf的实现分析"></a>8.3 printf的实现分析</h2><p><a href="https://www.cnblogs.com/pianist/p/3315801.html%EF%BC%88printf%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%EF%BC%89">https://www.cnblogs.com/pianist/p/3315801.html（printf实现的深入剖析）</a></p>
<p>从vsprintf生成显示信息，到write系统函数，到陷阱-系统调用 int 0x80或syscall等.</p>
<p>字符显示驱动子程序：从ASCII到字模库到显示vram（存储每一个点的RGB颜色信息）。</p>
<p>显示芯片按照刷新频率逐行读取vram，并通过信号线向液晶显示器传输每一个点（RGB分量）。</p>
<h2 id="8-4-getchar的实现分析"><a href="#8-4-getchar的实现分析" class="headerlink" title="8.4 getchar的实现分析"></a>8.4 getchar的实现分析</h2><p>异步异常-键盘中断的处理：键盘中断处理子程序。接受按键扫描码转成ascii码，保存到系统的键盘缓冲区。</p>
<p>getchar等调用read系统函数，通过系统调用读取按键ascii码，直到接受到回车键才返回。</p>
<h2 id="8-5本章小结"><a href="#8-5本章小结" class="headerlink" title="8.5本章小结"></a>8.5本章小结</h2><p>本章主要介绍了Unix I/O设备管理机制及方法，Unix I/O接口及函数。最后还有对printf和getchar函数的实现分析。</p>
<p><em><strong>*（第8章1分）*</strong></em></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h1><p>用计算机系统的语言，逐条总结hello所经历的过程。</p>
<p>1，hello.c经过预编译，拓展得到hello.i文本文件</p>
<p>2，hello.i经过编译，得到汇编代码hello.s汇编文件</p>
<p>3，hello.s经过汇编，得到二进制可重定位目标文件hello.o</p>
<p>4，hello.o经过链接，生成了可执行文件hello</p>
<p>5，bash进程调用fork函数，生成子进程；并由execve函数加载运行当前进程的上下文中加载并运行新程序hello</p>
<p>6，hello的变化过程中，会有各种地址，但最终我们真正期待的是PA物理地址。</p>
<p>7，hello再运行时会调用一些函数，比如printf函数，这些函数与linux I/O的设备模拟化密切相关</p>
<p>8，hello最终被shell父进程回收，内核会收回为其创建的所有信息</p>
<p>你对计算机系统的设计与实现的深切感悟，你的创新理念，如新的设计与实现方法。</p>
<p>初次接受计算机系统，是一个神奇的过程，从喜欢到厌恶，再到热爱。一台计算机中，容纳下了如此庞大的、精巧的设计，硬件和软件的相互配合，连一个小小的CPU，都蕴含着如此复杂的作用。这更让我发觉，在计算机的道路上，学无止境。以后的应该会发展出类脑计算机，能够实现类似人脑的思考，那将会是人工智能的崛起，一个新时代的到来。</p>
<p><em><strong>*（结论0分，缺失 -1分，根据内容酌情加分）*</strong></em></p>
<h1 id="附件"><a href="#附件" class="headerlink" title="** **附件"></a>** **<strong>附件</strong></h1><p>列出所有的中间产物的文件名，并予以说明起作用。</p>
<table>
<thead>
<tr>
<th>文件名字</th>
<th>文件作用</th>
</tr>
</thead>
<tbody><tr>
<td>hello.i</td>
<td>预处理得到的文件ASCII码的中间文件</td>
</tr>
<tr>
<td>hello.s</td>
<td>ASCII汇编语言文件</td>
</tr>
<tr>
<td>hello.o</td>
<td>汇编得到可重定位目标文件</td>
</tr>
<tr>
<td>hello.asm</td>
<td>反汇编得到的文本文件</td>
</tr>
<tr>
<td>hello.elf</td>
<td>hello.o的elf文件</td>
</tr>
<tr>
<td>hello</td>
<td>链接得到可执行目标文件</td>
</tr>
<tr>
<td>hello_elf</td>
<td>hello的elf文件</td>
</tr>
<tr>
<td>hello_asm</td>
<td>hello的反汇编文件</td>
</tr>
</tbody></table>
<p><em><strong>*（附件0分，缺失 -1分）*</strong></em></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="** **参考文献"></a>** **<strong>参考文献</strong></h1><p><strong>为完成本次大作业你翻阅的书籍与网站等</strong></p>
<p>[1]  林来兴. 空间控制技术[M]. 北京：中国宇航出版社，1992：25-42.</p>
<p>[2]  辛希孟. 信息技术与信息服务国际研讨会论文集：A集[C]. 北京：中国科学出版社，1999.</p>
<p>[3]  赵耀东. 新时代的工业工程师[M/OL]. 台北：天下文化出版社，1998 [1998-09-26]. <a href="http://www.ie.nthu.edu.tw/info/ie.newie.htm%EF%BC%88Big5%EF%BC%89">http://www.ie.nthu.edu.tw/info/ie.newie.htm（Big5）</a>.</p>
<p>[4]  谌颖. 空间交会控制理论与方法研究[D]. 哈尔滨：哈尔滨工业大学，1992：8-13.</p>
<p>[5] KANAMORI H. Shaking Without Quaking[J]. Science，1998，279（5359）：2063-2064.</p>
<p>[6] CHRISTINE M. Plant Physiology: Plant Biology in the Genome Era[J/OL]. Science，1998，281：331-332[1998-09-23]. <a href="http://www.sciencemag.org/cgi/">http://www.sciencemag.org/cgi/</a> collection/anatmorp.</p>
<p>[7]    <a href="https://blog.csdn.net/weixin_41143631/article/details/81221777">https://blog.csdn.net/weixin_41143631/article/details/81221777</a></p>
<p>[8]  <a href="https://cloud.tencent.com/developer/article/1401978">https://cloud.tencent.com/developer/article/1401978</a></p>
<p>[9]<a href="https://blog.csdn.net/zhou1519/article/details/21041121?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2">https://blog.csdn.net/zhou1519/article/details/21041121?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-2</a></p>
<p><em><strong>*（参考文献0分，缺失 -1分）*</strong></em></p>
]]></content>
      <categories>
        <category>计算机学习</category>
      </categories>
      <tags>
        <tag>计算机系统</tag>
      </tags>
  </entry>
</search>
